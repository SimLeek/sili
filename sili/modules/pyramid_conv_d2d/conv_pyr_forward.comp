#version 430

layout (local_size_x_id = 0) in;

struct PyramidLevel {
    int startIdx;
    int width;
    int height;
};

layout(std430, binding = 0) buffer vertConvBuffer {
    float weights[];
};

layout(std430, binding = 1) buffer InputBuffer {
    int inputPyramid[];
};

layout(std430, binding = 2) buffer PyramidData {
    int channels;
    int levels;
    PyramidLevel pyramidLevels[];
};

layout(std430, binding = 3) buffer OutputBuffer {
    float outputPyramid[];
};

layout(constant_id = 1) const uint kernel_width = 0;
layout(constant_id = 2) const uint kernel_height = 0;
layout(constant_id = 3) const uint kernel_depth = 0;
layout(constant_id = 4) const uint kernel_channels_out = 0;

// this allows us to use special indexing with remainders while using max 1D size
// their product should be local_size_x to optimize caching
layout(constant_id = 5) const uint chunk_width = 0;
layout(constant_id = 6) const uint chunk_height = 0;

#define EXTRACT_UINT8_VALUE(value, index) \
    (((value) >> ((index)<<3)) & 0xFFu)
#define EXTRACT_8_FROM_32_ARRAY(array, index) \
    EXTRACT_UINT8_VALUE(array[index >> 2], index & 3)
#define EXTRACT_FLOAT_FROM_INT8_ARRAY(array, index) \
    float(EXTRACT_8_FROM_32_ARRAY(array, index))

int optimized_index(ivec4 optim_xy, uint image_width, uint image_height){ // image width and height are still needed because x and y will be changed in convolutions
    if(optim_xy.x != -1){
        int full_index_y = optim_xy.y*int(chunk_height)+optim_xy.w;
        int full_index_x = optim_xy.x*int(chunk_width)+optim_xy.z;
        int full_index = full_index_x*int(image_height)+full_index_y;
        return full_index;
    }else{
        int full_index = optim_xy.z*int(image_height)+optim_xy.w;
        return full_index;
    }

    // Do this after the function: if (full_index<image_width*image_height && full_index>=0)
}

ivec2 optimized_vec2(ivec4 optim_xy, uint image_width, uint image_height){ // image width and height are still needed because x and y will be changed in convolutions
    if(optim_xy.x != -1){
        int full_index_y = optim_xy.y*int(chunk_height)+optim_xy.w;
        int full_index_x = optim_xy.x*int(chunk_width)+optim_xy.z;
        return ivec2(full_index_x, full_index_y);
    }else{
        return ivec2(optim_xy.z, optim_xy.w);
    }

    // Do this after the function: if (full_index<image_width*image_height && full_index>=0)
}

//note: if memory is less of a problem than all of these multiply/divide ops, this can be pre-computed.
ivec4 optimized_xy(uint unoptimized_index, uint image_width, uint image_height){  // unoptimized_index is WITHIN the image, so subtract image_start in image pyramids
    if(unoptimized_index<image_height*image_width){ // Happens often. sum_of_image_sizes%1024!=0
        uint image_w_chunks = image_width/chunk_width;  //floor
        uint image_h_chunks = image_height/chunk_height;
        uint max_w_chunk = image_w_chunks*chunk_width;
        uint max_h_chunk = image_h_chunks*chunk_height;
        if(unoptimized_index<max_w_chunk*max_h_chunk){
            uint chunk_size = chunk_width*chunk_height;
            uint large_idx = unoptimized_index/ chunk_size;
            uint large_x = large_idx%image_w_chunks;
            uint large_y = large_idx/image_w_chunks;
            uint small_idx = unoptimized_index% chunk_size;
            uint small_x = small_idx%chunk_width;
            uint small_y = small_idx/chunk_width;
            return ivec4(large_x, large_y, small_x, small_y);
        }else if(unoptimized_index<image_width*max_h_chunk){
            uint r_width = image_width - max_w_chunk;
            uint r_optim = unoptimized_index-max_h_chunk*max_w_chunk;
            uint small_x = r_optim%r_width + max_w_chunk;
            uint small_y = r_optim/r_width;
            return ivec4(-1, -1, small_x, small_y);  // special case. Small x and y are now global values.
        }else{
            uint r_height = image_height - max_h_chunk;
            uint r_optim = unoptimized_index-max_h_chunk*image_width;
            // since the height is now small, it's better to zigzag up and down to improve cache hits
            uint small_x = r_optim/r_height;
            uint small_y = r_optim%r_height + max_h_chunk;
            return ivec4(-1, -1, small_x, small_y);  // special case. Small x and y are now global values.
        }
    }else{
        return ivec4(-1, -1, -1, -1);
    }
}

vec2 calculateInputCoordinates(int x, int y, int nextLevelWidth, int nextLevelHeight, int currentLevelWidth, int currentLevelHeight) {
    float inputX = float(x) * float(nextLevelWidth) / float(currentLevelWidth);
    float inputY = float(y) * float(nextLevelHeight) / float(currentLevelHeight);
    return vec2(inputX, inputY);
}

ivec4 calculate_corner_indices(int start_index, int channels, vec2 inputCoords, int nextPyramidLevelHeight, int channel)
    {
        int topLeftIdx = start_index * channels +
                         int(floor(inputCoords.x) * nextPyramidLevelHeight * channels +
                             floor(inputCoords.y) * channels + channel);
        int topRightIdx = topLeftIdx + nextPyramidLevelHeight * channels;
        int bottomLeftIdx = topLeftIdx + channels;
        int bottomRightIdx = topRightIdx + channels;
        return ivec4(topLeftIdx, topRightIdx, bottomLeftIdx, bottomRightIdx);
    }

#define SAMPLE_CORNER_VALUES(array, indices) \
        vec4( \
            float(EXTRACT_8_FROM_32_ARRAY(array, indices.x)), \
            float(EXTRACT_8_FROM_32_ARRAY(array, indices.y)), \
            float(EXTRACT_8_FROM_32_ARRAY(array, indices.z)), \
            float(EXTRACT_8_FROM_32_ARRAY(array, indices.w)) \
        )

float bilinearInterpolation(float x, float y, float bottomLeft, float bottomRight, float topLeft, float topRight) {
    float left = mix(topLeft, bottomLeft, y);
    float right = mix(topRight, bottomRight, y);
    return mix(left, right, x);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;

    int in_level = -1;
    int in_startIdx = -1;
    int in_width = -1;
    int in_height = -1;
    PyramidLevel currentPyramidLevel;
    for(int level=0;level<levels-1;level++) {
        if(idx>=pyramidLevels[level].startIdx && idx<pyramidLevels[level+1].startIdx){
            in_level = level;
            in_startIdx = pyramidLevels[level].startIdx;
            in_width = pyramidLevels[level].width;
            in_height = pyramidLevels[level].height;
            currentPyramidLevel = pyramidLevels[level];
        }
    }
    if(in_level==-1){// top level wasn't checked
        in_level = levels-1;
        in_startIdx = pyramidLevels[in_level].startIdx;
        in_width = pyramidLevels[in_level].width;
        in_height = pyramidLevels[in_level].height;
        currentPyramidLevel = pyramidLevels[in_level];
    }
    ivec4 optim_xy = optimized_xy(idx-in_startIdx, in_width, in_height);
    ivec2 out_idx = optimized_vec2(optim_xy, in_width, in_height);
    if(out_idx.x>=0 && out_idx.y>=0 && out_idx.x<in_width && out_idx.y<in_height) {
        for (int kco = 0; kco < kernel_channels_out; kco++) {
            float result = 0;
            for (int kd = 0; kd < kernel_depth; kd++) {
                int d_diff = kd - int(kernel_depth / 2);
                int next_level = in_level + d_diff;
                if (next_level >= 0 && next_level < levels) {
                    int next_startIdx = pyramidLevels[next_level].startIdx;
                    int next_width = pyramidLevels[next_level].width;
                    int next_height = pyramidLevels[next_level].height;
                    PyramidLevel nextPyramidLevel = pyramidLevels[next_level];

                    vec2 inputCoords = calculateInputCoordinates(
                        out_idx.x,
                        out_idx.y,
                        nextPyramidLevel.width,
                        nextPyramidLevel.height,
                        currentPyramidLevel.width,
                        currentPyramidLevel.height
                    );

                    for (int kw = 0; kw < kernel_width; kw++) {
                        int w_diff = kw - int(kernel_width / 2);
                        for (int kh = 0; kh < kernel_height; kh++) {
                            int h_diff = kh - int(kernel_height / 2);

                            // scan with
                            vec2 inputCoords2 = inputCoords + vec2(w_diff, h_diff);

                            if (inputCoords2.x >= 0 && inputCoords2.x < next_width && inputCoords2.y >= 0 && inputCoords2.y < next_height) {
                                for (int kci = 0; kci < channels; kci++) {
                                    uint weight_idx = kco * (channels * kernel_depth * kernel_height * kernel_width) +
                                    kci * (kernel_depth * kernel_height * kernel_width) +
                                    kd * (kernel_height * kernel_width) +
                                    kh * kernel_width +
                                    kw;
                                    if (d_diff == 0) {
                                        int in_idx = in_startIdx * channels +
                                        int((out_idx.x + w_diff) * currentPyramidLevel.height * channels +
                                        (out_idx.y + h_diff) * channels + kci);
                                        result += EXTRACT_FLOAT_FROM_INT8_ARRAY(inputPyramid, in_idx) * weights[weight_idx];
                                    } else {
                                        ivec4 cornerIndices = calculate_corner_indices(nextPyramidLevel.startIdx, channels, inputCoords2, nextPyramidLevel.height, kci);
                                        vec4 v = SAMPLE_CORNER_VALUES(inputPyramid, cornerIndices);

                                        float pixel = bilinearInterpolation(
                                            fract(inputCoords2.x),
                                            fract(inputCoords2.y),
                                            v.z, v.w, v.x, v.y
                                        );
                                        result += pixel * weights[weight_idx];
                                    }
                                }
                            }
                        }
                    }
                }
            }
            uint out_idx2 = in_startIdx * kernel_channels_out +
                                        int((out_idx.x) * currentPyramidLevel.height * kernel_channels_out +
                                        (out_idx.y) * kernel_channels_out + kco);
            outputPyramid[out_idx2] = result;
        }
    }
}