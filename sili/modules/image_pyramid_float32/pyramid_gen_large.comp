#version 430

layout (local_size_x_id = 0) in;

struct PyramidLevel {
    int startIdx;
    int width;
    int height;
};

layout(std430, binding = 0) buffer InputBuffer {
    float inputImage[];
};

layout(std430, binding = 1) buffer PyramidData {
    int channels;
    int levels;
    PyramidLevel pyramidLevels[];
};

layout(std430, binding = 2) buffer OutputBuffer {
    float outputPyramid[];
};

layout(std430, binding = 3) buffer LevelBuffer {
    int currentLevel;
};

layout(constant_id = 1) const float pyr_div = 1.0;

float bilinearInterpolation(float x, float y, float bottomLeft, float bottomRight, float topLeft, float topRight) {
    float left = mix(topLeft, bottomLeft, y);
    float right = mix(topRight, bottomRight, y);
    return mix(left, right, x);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    int level = currentLevel;
    int levelWidth = pyramidLevels[level].width;
    int levelHeight = pyramidLevels[level].height;

    int y_current = int((gl_GlobalInvocationID.x) % levelHeight);
    int x_current = int((gl_GlobalInvocationID.x) / levelHeight);
    //int c_current = int(int(gl_GlobalInvocationID.x));
    if(x_current<levelWidth && y_current<levelHeight) {
        for (int c_current = 0; c_current < channels; c_current++) {
            int outputIndex = pyramidLevels[level].startIdx * channels + x_current * levelHeight * channels + y_current * channels + c_current;
            if (level < levels - 1) {
                float inputX = float(x_current) * float(pyramidLevels[level + 1].width) / float(levelWidth);
                float inputY = float(y_current) * float(pyramidLevels[level + 1].height) / float(levelHeight);

                int topLeftIdx = pyramidLevels[level + 1].startIdx * channels + int(floor(inputX) * pyramidLevels[level + 1].height * channels + floor(inputY) * channels + c_current);
                int topRightIdx = topLeftIdx + pyramidLevels[level + 1].height * channels;
                int bottomLeftIdx = topLeftIdx + channels;
                int bottomRightIdx = topRightIdx + channels;

                float topLeft = outputPyramid[topLeftIdx];
                float topRight = outputPyramid[topRightIdx];
                float bottomLeft = outputPyramid[bottomLeftIdx];
                float bottomRight = outputPyramid[bottomRightIdx];

                outputPyramid[outputIndex] = bilinearInterpolation(fract(inputX), fract(inputY), bottomLeft, bottomRight, topLeft, topRight) / pyr_div;
            } else {  // base image copy
                      int inputIndex = int(x_current * levelHeight * channels + y_current * channels + c_current);
                      outputPyramid[outputIndex] = inputImage[inputIndex] / pyr_div;
            }
        }
    }
}
